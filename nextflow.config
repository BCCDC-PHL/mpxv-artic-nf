manifest {
  author = 'connor-lab: Matt Bull, Sendu Bala. BCCDC-PHL: Dan Fornika. oicr-gsi: Jared Simpson, Michael Laszloffy'
  description = 'Nextflow for running the Artic mpxv pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}

params {

  illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz']
  fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )

  // Boilerplate options
  directory = false
  prefix = false
  ref = false
  bed = false
  gff = 'NO_FILE'
  primer_pairs_tsv = 'NO_FILE'
  profile = false
  help = false
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
  
  // host filtering
  composite_ref = false
  viral_contig_name = 'BCCDCmpx2'

  // Repo to download your primer scheme from
  schemeRepoURL = 'https://github.com/BCCDC-PHL/artic-mpxv2022.git'

  // Directory within schemeRepoURL that contains primer schemes
  schemeDir = 'primer_schemes'

  // Scheme name
  scheme =  'mpxv-2022'

  // Scheme version
  schemeVersion = 'V2.4'

  // Target depth for bbnorm kmer-based depth normalization
  normalizationTargetDepth = 200

  // Minimum depth for bbnorm kmer-based depth normalization
  normalizationMinDepth = 5

  // Length of illumina reads to keep after primer trimming
  illuminaKeepLen = 50

  // Sliding window quality threshold for keeping reads after primer trimming (illumina)
  illuminaQualThreshold = 20

  // frequency threshold to call ambiguous variant
  varMinFreqThreshold = 0.25
    
  // frequency threshold for unambiguous variant
  varFreqThreshold = 0.75

  // Minimum coverage depth to call variant
  varMinDepth = 10
  
}

profiles {
  conda {
     process.conda = "$baseDir/environments/environment.yml"
     if (params.cache) {
       conda.cacheDir = params.cache
     }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: makeQCCSV {
    conda = "$baseDir/environments/extras.yml"
  }
  withName: performHostFilter {
    cpus = 4
  }
}

timeline {
  enabled = false
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = false
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = false
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = false
  file = "${params.tracedir}/pipeline_dag.svg"
}
