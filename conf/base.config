// ARTIC specific params

params{
    // Specify in the command using "--directory"
    runDirectory = trimTrailingSlash(params.directory)

    // Run prefix
    runPrefix = getRunPrefix( runDirectory )

    // illumina fastq search path
    illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz']

    fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )

    // Minimum read length for artic gather
    min_length = 400

    // Maximum read length for artic gather
    max_length = 700

    // Set to an integer to enable normalising in artic minion 
    // IF SET TO false THIS WILL USE artic minion DEFAULT (100)
    normalise = 500

    // Repo to download your primer scheme from
    schemeRepoURL = 'https://github.com/artic-network/artic-ncov2019.git'

    // Directory within schemeRepoURL that contains primer schemes
    schemeDir = 'primer_schemes'

    // Scheme name
    scheme =  'nCoV-2019'

    // Scheme version
    schemeVersion = 'V2'

    // Use bwa not minimap2? Specify in the command using "--bwa"
    bwa = false

    // Run experimental medaka pipeline? Specify in the command using "--medaka"
    medaka = false

    // Run Illumina pipeline
    illumina = false
 
    // Run nanopolish pipeline
    nanopolish = false

    // Allow reads that don't have primer sequence? Ligation prep = false, nextera = true
    allowNoprimer = true

    // Length of illumina reads to keep after primer trimming
    illuminaKeepLen = 20

    // Sliding window quality threshold for keeping reads after primer trimming (illumina)
    illuminaQualThreshold = 20

    // Mpileup depth for ivar
    mpileupDepth = 100000

    // iVar frequency threshold for variant
    ivarFreqThreshold = 0.9

    // Minimum coverage depth to call variant
    ivarMinDepth = 50

    // Upload data to CLIMB?
    upload = false

    // CLIMB username
    CLIMBUser = 'climb-covid19-testuser'

    // CLIMB SSH pubkey
    CLIMBkey = '/home/climb-covid19-testuser/.ssh/id_rsa'

    // CLIMB hostname
    CLIMBHostname = 'bham.covid19.climb.ac.uk'
}

def trimTrailingSlash( path ) {
    if ( path.endsWith('/') ) {
    return path.substring(0, path.length() - 1)
    } else {
    return path
    }
}

def getRunPrefix( path ) {
    return path.split('/')[-1]
}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    def fastq_searchpath = []
    for (item in illuminaSuffixes){
        for(thing in fastq_exts){
            fastq_searchpath.add(params.runDirectory + '/**' + item + thing)
        }
    }
    return fastq_searchpath
}

